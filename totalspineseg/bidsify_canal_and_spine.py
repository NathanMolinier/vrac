"""
The aim of this script is to reorient and save canal and spine segmentations inside the derivatives/labels folder. The canal JSON are also updated
by adding the `SpatialReference` field and manual segmentations of Abel Salmona are kept over automated segmentations.
"""

import os, argparse, json, glob, shutil
from vrac.data_management.image import Image, zeros_like
from vrac.utils.metrics import compute_dsc
import time 
import numpy as np

def get_parser():
    # parse command line arguments
    parser = argparse.ArgumentParser(description='Bidsify spine and canal segmentations.')
    parser.add_argument('-spine', required=True, help='Path to the spine segmentations folder (Required)')
    parser.add_argument('-canal', required=True, help='Path to the canal segmentations folder (Required)')
    parser.add_argument('-ofolder', required=True, help='Path to the output BIDS folder (Required)')
    return parser

def update_json_file(path_json_out):
    """
    Create a json sidecar file
    :param path_file_out: path to the output file
    """

    with open(path_json_out, 'r') as file:
        data_json = json.load(file)
        print(f'JSON {path_json_out} was loaded')
    
    if "SpatialReference" not in data_json.keys():
        data_json["SpatialReference"] = "orig"
    
    with open(path_json_out, 'w') as f:
        json.dump(data_json, f, indent=4)
        print(f'JSON {path_json_out} was updated')

def main():
    # Load parser
    parser = get_parser()
    args = parser.parse_args()

    # Define paths
    spine_folder = args.spine
    canal_folder = args.canal
    output_folder = args.ofolder

    # List paths
    spine_files = [file for file in glob.glob(spine_folder + "/**/*" + "_label-spine_dseg.nii.gz", recursive=True)]
    canal_files = [file for file in glob.glob(canal_folder + "/*" + "_label-canal_seg.nii.gz", recursive=True)]
    
    # Deal with spine segmentations
    for file in spine_files:
        # Load image
        seg = Image(file).change_orientation('RPI')
        sub = os.path.basename(file).split('_')[0]

        # Save files
        output_path = os.path.join(output_folder, sub, "anat", os.path.basename(file))
        seg.save(output_path)
        shutil.copy2(file.replace(".nii.gz", ".json"), output_path.replace(".nii.gz", ".json"))
    
    # Deal with canal segmentations
    for file in canal_files:
        # Load image
        seg = Image(file).change_orientation('RPI')
        sub = os.path.basename(file).split('_')[0]

        # Check output path
        output_path = os.path.join(output_folder, sub, "anat", os.path.basename(file))
        
        # Check if manually generated by Abel Salmona
        skip = False
        if os.path.exists(output_path.replace('.nii.gz', '.json')):
            with open(output_path.replace('.nii.gz', '.json'), 'r') as f:
                data_json = json.load(f)

            
            for dic in data_json['GeneratedBy']:
                if 'Author' in dic.keys():
                    if dic['Author'] == 'Abel Salmona':
                        skip = True
        
        if not skip:
            seg.save(output_path)
            shutil.copy2(file.replace(".nii.gz", ".json"), output_path.replace(".nii.gz", ".json"))

            # Update JSON file
            update_json_file(output_path.replace(".nii.gz", ".json"))

        else:
            print(f'{output_path} generated by Abel Salmona, skip segmentation')
    

if __name__=='__main__':
    main()